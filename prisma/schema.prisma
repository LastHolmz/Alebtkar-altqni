datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Demo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  price       Int?
  title       String
  href        String
  bio         String
  description String?
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  phone     Int
  content   String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  to         String
  title      String
  phone      Int
  images     String[]
  content    String
  email      String?
  list       ListForOffer[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  editable   Boolean        @default(true)
  totalPrice Int            @default(0)
}

model ListForOffer {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  type     ListForOfferType @default(optional)
  title    String
  price    Int?
  period   Int?
  Offer    Offer?           @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId  String?          @db.ObjectId
  selected Boolean          @default(false)
}

enum ListForOfferType {
  optional
  mandatory
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  phoneNumber   Int
  password      String
  email         String    @unique
  verified      Boolean   @default(false)
  verifyingCode Int?
  role          Roles     @default(admin)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
}

model Article {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String      @unique
  body      String
  enTitle   String
  enBody    String
  poster    String?     @default("/images/default_image.png")
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String      @db.ObjectId
  views     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  type      ArticleType @default(news)
  readTime  Int?        @default(0)
}

enum Roles {
  admin
  superAdmin
}

enum ArticleType {
  news
  conference
  research
  article
}
